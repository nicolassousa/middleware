import ApiKeyAuthenticatedService from "../apiKeyAuthenticatedService";
import Client from "../client";
import { IRequest } from "../typings/requestOptions";
declare class Checkout extends ApiKeyAuthenticatedService {
    private readonly _payments;
    private readonly _paymentMethods;
    private readonly _paymentsDetails;
    private readonly _paymentSession;
    private readonly _paymentsResult;
    private readonly _paymentLinks;
    private readonly _paymentLinksId;
    private readonly _originKeys;
    private readonly _paymentMethodsBalance;
    private readonly _orders;
    private readonly _ordersCancel;
    constructor(client: Client);
    payments(paymentsRequest: ICheckout.PaymentRequest, requestOptions?: IRequest.Options): Promise<ICheckout.PaymentResponse>;
    paymentMethods(paymentMethodsRequest: ICheckout.PaymentMethodsRequest): Promise<ICheckout.PaymentMethodsResponse>;
    paymentLinks(paymentLinkRequest: ICheckout.CreatePaymentLinkRequest): Promise<ICheckout.PaymentLinkResource>;
    getPaymentLinks(linkId: string): Promise<ICheckout.PaymentLinkResource>;
    updatePaymentLinks(linkId: string, status: "expired"): Promise<ICheckout.PaymentLinkResource>;
    paymentsDetails(paymentsDetailsRequest: ICheckout.DetailsRequest, requestOptions?: IRequest.Options): Promise<ICheckout.PaymentResponse>;
    paymentSession(paymentSessionRequest: ICheckout.PaymentSetupRequest, requestOptions?: IRequest.Options): Promise<ICheckout.PaymentSetupResponse>;
    paymentResult(paymentResultRequest: ICheckout.PaymentVerificationRequest): Promise<ICheckout.PaymentVerificationResponse>;
    originKeys(originKeysRequest: ICheckout.CheckoutUtilityRequest): Promise<ICheckout.CheckoutUtilityResponse>;
    paymentMethodsBalance(paymentMethodsBalanceRequest: ICheckout.CheckoutBalanceCheckRequest): Promise<ICheckout.CheckoutBalanceCheckResponse>;
    orders(ordersRequest: ICheckout.CheckoutCreateOrderRequest): Promise<ICheckout.CheckoutCreateOrderResponse>;
    ordersCancel(ordersCancelRequest: ICheckout.CheckoutCancelOrderRequest): Promise<ICheckout.CheckoutCancelOrderResponse>;
}
export default Checkout;
