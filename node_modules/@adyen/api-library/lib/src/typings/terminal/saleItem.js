"use strict";
/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2020 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaleItem = void 0;
/**
 * Terminal API
 * Definition of Terminal API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class SaleItem {
    static getAttributeTypeMap() {
        return SaleItem.attributeTypeMap;
    }
}
exports.SaleItem = SaleItem;
SaleItem.discriminator = undefined;
SaleItem.attributeTypeMap = [
    {
        "name": "additionalProductInfo",
        "baseName": "AdditionalProductInfo",
        "type": "string"
    },
    {
        "name": "eanUpc",
        "baseName": "EanUpc",
        "type": "string"
    },
    {
        "name": "itemAmount",
        "baseName": "ItemAmount",
        "type": "number"
    },
    {
        "name": "itemID",
        "baseName": "ItemID",
        "type": "number"
    },
    {
        "name": "productCode",
        "baseName": "ProductCode",
        "type": "string"
    },
    {
        "name": "productLabel",
        "baseName": "ProductLabel",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "Quantity",
        "type": "number"
    },
    {
        "name": "saleChannel",
        "baseName": "SaleChannel",
        "type": "string"
    },
    {
        "name": "taxCode",
        "baseName": "TaxCode",
        "type": "string"
    },
    {
        "name": "unitOfMeasure",
        "baseName": "UnitOfMeasure",
        "type": "SaleItem.UnitOfMeasureEnum"
    },
    {
        "name": "unitPrice",
        "baseName": "UnitPrice",
        "type": "number"
    }
];
(function (SaleItem) {
    let UnitOfMeasureEnum;
    (function (UnitOfMeasureEnum) {
        UnitOfMeasureEnum[UnitOfMeasureEnum["Case"] = "Case"] = "Case";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Centilitre"] = "Centilitre"] = "Centilitre";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Centimetre"] = "Centimetre"] = "Centimetre";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Foot"] = "Foot"] = "Foot";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Gram"] = "Gram"] = "Gram";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Inch"] = "Inch"] = "Inch";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Kilogram"] = "Kilogram"] = "Kilogram";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Kilometre"] = "Kilometre"] = "Kilometre";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Litre"] = "Litre"] = "Litre";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Meter"] = "Meter"] = "Meter";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Mile"] = "Mile"] = "Mile";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Other"] = "Other"] = "Other";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Ounce"] = "Ounce"] = "Ounce";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Pint"] = "Pint"] = "Pint";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Pound"] = "Pound"] = "Pound";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Quart"] = "Quart"] = "Quart";
        UnitOfMeasureEnum[UnitOfMeasureEnum["UKGallon"] = "UKGallon"] = "UKGallon";
        UnitOfMeasureEnum[UnitOfMeasureEnum["USGallon"] = "USGallon"] = "USGallon";
        UnitOfMeasureEnum[UnitOfMeasureEnum["Yard"] = "Yard"] = "Yard";
    })(UnitOfMeasureEnum = SaleItem.UnitOfMeasureEnum || (SaleItem.UnitOfMeasureEnum = {}));
})(SaleItem = exports.SaleItem || (exports.SaleItem = {}));
//# sourceMappingURL=saleItem.js.map